Example 1:

Input: chars = ["a","a","b","b","c","c","c"]
Output: Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]
Explanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".
Example 2:

Input: chars = ["a"]
Output: Return 1, and the first character of the input array should be: ["a"]
Explanation: The only group is "a", which remains uncompressed since it's a single character.
Example 3:

Input: chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
Output: Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].
Explanation: The groups are "a" and "bbbbbbbbbbbb". This compresses to "ab12".

******************************************************************************************************************

public int compress(char[] chars) {
    if (chars == null || chars.length == 0) {
        return 0;
    }
    
    int index = 0; // index to track the position in the compressed array
    int i = 0;     // index to iterate through the original array
    
    while (i < chars.length) {
        char currentChar = chars[i];
        int count = 0;
        
        // Count consecutive occurrences of currentChar
        while (i < chars.length && chars[i] == currentChar) {
            i++;
            count++;
        }
        
        // Write the character to chars array
        chars[index++] = currentChar;
        
        // If count > 1, write its digits to chars array
        if (count > 1) {
            String countStr = String.valueOf(count);
            for (char c : countStr.toCharArray()) {
                chars[index++] = c;
            }
        }
    }
    
    return index; // Return the new length of the compressed array
}
