// find the first and last occurence of K in arr

package learnDSA.com;
/*
public class lect_13_binarySearch_interview {

    public static int firstOcc(int[] arr, int key){

        int start =0;
        int end = arr.length-1;
       // int mid = start + (end - start)/2;
        int ans = -1;
        while (start <= end){
            int mid = start + (end - start)/2;
            if(arr[mid] == key){
                ans = mid;
                end = mid -1;
            }
            else if( key > mid){
                start = mid +1;
            }
            else{
                end = mid - 1;
                mid = start + (end - start)/2;
            }

        }
        return ans;
    }
    public static int lastOcc(int[] arr, int key){

        int start =0;
        int end = arr.length-1;
//        int mid = start + (end - start)/2;
        int ans = -1;
        while (start <= end){
            int mid = start + (end - start)/2;
            if(arr[mid] == key){
                ans = mid;
                start = mid +1;
            }
            else if( key > mid){
                start = mid +1;
            }
            else{
                end = mid - 1;
                mid = start + (end - start)/2;
            }

        }
        return ans;
    }
    public static void main(String[] args) {
        int[] arr = {1,2,3,3,3,3,3,3,3,3,5};
        int index = firstOcc(arr, 3);
        int index2 = lastOcc(arr , 3);
        System.out.println("First Occurrence: " + index);
        System.out.println("Last Occurrence: " + index2);

    }
}

 */

// return peak mountain in present arrays

public class lect_13_binarySearch_interview {

    public static int findLarge_value(int[]arr){
        int start = 0;
        int end = arr.length-1;

        while (start < end){
            int mid = start + (end - start)/2;
            if (arr[mid] < arr[mid + 1]){
                start = mid + 1;
            }
            else{
                end = mid;

            }
        }
        return  arr[start]; // return the peak element itself

    }

    public static void main(String[] args) {
        int[] arr= {3,4,5,1};
        int num= findLarge_value(arr);
        System.out.println(num);
    }
}



 // find the number the of element in single digit
 // Example: {1,2,3,3,3,3,3,3,3,3,5}; == number of 3 is 8 ans
/*
public class lect_13_binarySearch_interview {

    public static int firstOcc(int[] arr, int key){

        int start =0;
        int end = arr.length-1;
        int ans = -1;

        while (start <= end){
            int mid = start + (end - start)/2;
            if(arr[mid] == key){
                ans = mid;
                end = mid -1;
            }
            else if( key > mid){
                start = mid +1;
            }
            else{
                end = mid - 1;
                mid = start + (end - start)/2;
            }

        }
        return ans;
    }
    public static int lastOcc(int[] arr, int key){

        int start =0;
        int end = arr.length-1;
        int ans = -1;
        while (start <= end){
            int mid = start + (end - start)/2;
            if(arr[mid] == key){
                ans = mid;
                start = mid +1;
            }
            else if( key > mid){
                start = mid +1;
            }
            else{
                end = mid - 1;
                mid = start + (end - start)/2;
            }

        }
        return ans;
    }
    public static void main(String[] args) {
        int[] arr = {1,2,3,3,3,3,3,3,3,3,5};
        int index = firstOcc(arr, 3);
        int index2 = lastOcc(arr , 3);
        int ind= (index2 - index)+1;
        System.out.println(ind);

    }
}

 */
