 ********************************************************
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
 Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
 **************************************************************

import java.util.Arrays;

public class RotateArray {

    public static void rotateArray(int[] nums, int k) {
        k = k % nums.length;
        reverse(nums, 0, nums.length - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, nums.length - 1);
        System.out.println(Arrays.toString(nums));
    }

    public static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 4, 5, 6, 7};
        int k1 = 3;
        rotateArray(nums1, k1);
    }

}

>>>>>>>>>>>>>>>>> 2ND METHOD <<<<<<<<<<<<<<<<

public class lec_21_leeCode_ProblemPart_2 {

        public static void rotateArray(int[] nums, int k) {
            int n = nums.length;
            int[] rotated = new int[n];

            for (int i = 0; i < n; i++) {
                rotated[(i + k) % n] = nums[i];
            }
            System.arraycopy(rotated, 0, nums, 0, n);
        }

        public static void main(String[] args) {
            // Example 1
            int[] nums1 = {1, 2, 3, 4, 5, 6, 7};
            int k1 = 3;
            lec_21_leeCode_ProblemPart_2 solution = new lec_21_leeCode_ProblemPart_2();
            solution.rotateArray(nums1, k1);
            for (int num : nums1) {
                System.out.print(num + " ");
            }
            System.out.println(); // Output: 5 6 7 1 2 3 4
        }
    }


--------------------------------------------------------------------------------------------------------
**********************************
 Cheak array is sorted or not 
**********************************
public class lec_21_leeCode_ProblemPart_2 {
    public static boolean isArraySorted(int[] arr, int n) {
        if (n <= 1) {
            return true; // Array with 0 or 1 element is trivially sorted
        }

        for (int i = 1; i < n; i++) {
            if (arr[i-1] > arr[i]) {
                return false; // If we find an inversion, array is not sorted
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int[] nums = {2, 1, 3, 4};
        boolean sorted = isArraySorted(nums, nums.length);
        System.out.println("Is array sorted? " + sorted);
    }
}


--------------------------------------------------------------------------------------------

1752. Check if Array Is Sorted and Rotated
***************************************************
Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero).
Otherwise, return false.

There may be duplicates in the original array.
Input: nums = [3,4,5,1,2]
Output: true

Input: nums = [2,1,3,4]
Output: false
*****************************************************

public class lec_21_leeCode_ProblemPart_2 {
    static boolean rotateArray(int[]nums){
        int n = nums.length;
        int count = 0;

          for (int i = 1; i < n; i++) {
              if(nums[i -1] > nums[i]){
                  count++;
              }
          }
          if(nums[n -1] > nums[0]){
              count++;
          }
          return count <= 1;

    }

    public static void main(String[] args) {
        int[] nums =  {1,2,3,4,5,6}; // return true
        int[] nums2 = {2, 1, 3, 4}; // return false

        boolean result = rotateArray(nums);
        boolean result2 = rotateArray(nums2);

        System.out.println(result);
        System.out.println(result2);

    }
}

