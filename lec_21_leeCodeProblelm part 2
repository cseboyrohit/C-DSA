 ********************************************************
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
 Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
 **************************************************************

import java.util.Arrays;

public class RotateArray {

    public static void rotateArray(int[] nums, int k) {
        k = k % nums.length;
        reverse(nums, 0, nums.length - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, nums.length - 1);
        System.out.println(Arrays.toString(nums));
    }

    public static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 4, 5, 6, 7};
        int k1 = 3;
        rotateArray(nums1, k1);
    }

}

>>>>>>>>>>>>>>>>> 2ND METHOD <<<<<<<<<<<<<<<<

public class lec_21_leeCode_ProblemPart_2 {

        public static void rotateArray(int[] nums, int k) {
            int n = nums.length;
            int[] rotated = new int[n];

            for (int i = 0; i < n; i++) {
                rotated[(i + k) % n] = nums[i];
            }
            System.arraycopy(rotated, 0, nums, 0, n);
        }

        public static void main(String[] args) {
            // Example 1
            int[] nums1 = {1, 2, 3, 4, 5, 6, 7};
            int k1 = 3;
            lec_21_leeCode_ProblemPart_2 solution = new lec_21_leeCode_ProblemPart_2();
            solution.rotateArray(nums1, k1);
            for (int num : nums1) {
                System.out.print(num + " ");
            }
            System.out.println(); // Output: 5 6 7 1 2 3 4
        }
    }


--------------------------------------------------------------------------------------------------------
**********************************
 Cheak array is sorted or not 
**********************************
public class lec_21_leeCode_ProblemPart_2 {
    public static boolean isArraySorted(int[] arr, int n) {
        if (n <= 1) {
            return true; // Array with 0 or 1 element is trivially sorted
        }

        for (int i = 1; i < n; i++) {
            if (arr[i-1] > arr[i]) {
                return false; // If we find an inversion, array is not sorted
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int[] nums = {2, 1, 3, 4};
        boolean sorted = isArraySorted(nums, nums.length);
        System.out.println("Is array sorted? " + sorted);
    }
}


--------------------------------------------------------------------------------------------

1752. Check if Array Is Sorted and Rotated
***************************************************
Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero).
Otherwise, return false.

There may be duplicates in the original array.
Input: nums = [3,4,5,1,2]
Output: true

Input: nums = [2,1,3,4]
Output: false
*****************************************************

public class lec_21_leeCode_ProblemPart_2 {
    static boolean rotateArray(int[]nums){
        int n = nums.length;
        int count = 0;

          for (int i = 1; i < n; i++) {
              if(nums[i -1] > nums[i]){
                  count++;
              }
          }
          if(nums[n -1] > nums[0]){
              count++;
          }
          return count <= 1;

    }

    public static void main(String[] args) {
        int[] nums =  {1,2,3,4,5,6}; // return true
        int[] nums2 = {2, 1, 3, 4}; // return false

        boolean result = rotateArray(nums);
        boolean result2 = rotateArray(nums2);

        System.out.println(result);
        System.out.println(result2);

    }
}

---------------------------------------------------------------------------------------------------

*******************************************************
The length of each array is greater than zero.

2. The first index of each array is the most significant digit of the number. For example, if the array A[] = {4, 5, 1},
 then the integer represented by this array is 451 and array B[] = {3, 4, 5} 
so the sum will be 451 + 345 = 796. So you need to return {7, 9, 6}.

Sample Input 1:
2
4 1 
1 2 3 4
6

3 2
1 2 3
9 9    
Sample Output 1:
1 2 4 0
2 2 2
*************************************************************


package learnDSA.com;

import java.util.Scanner;

public class lec_21_sumOfTwo_Arrays {

        static void sumOfTwoArrays(int[]arr1, int n , int[]arr2, int m, int[]output){
            int i = n -1;
            int j = m -1;
            int k = output.length -1;
            int carry = 0;

            while(i >= 0 && j >= 0){
                int sum = arr1[i] + arr2[j] + carry;
                carry = sum / 10;
                output[k] = sum % 10;
                i--;
                j--;
                k--;

            }

            while(i >= 0){
                int sum = arr1[i] + carry;
                carry = sum / 10;
                output[k] = sum % 10;
                i--;
                k--;

            }

            while(j >= 0){
                int sum = arr2[j] + carry;
                carry = sum / 10;
                output[k] = sum % 10;
                j--;
                k--;

            }
            output[k] = carry;


        }


        public static void main(String[] args) {


            Scanner sc = new Scanner(System.in);

            // Input for first array
            System.out.print("Enter the size of array 1: ");
            int n = sc.nextInt();
            int[] arr1 = new int[n];
            System.out.print("Enter elements of array 1: ");
            for (int i = 0; i < n; i++) {
                arr1[i] = sc.nextInt();
            }

            // Input for second array
            System.out.print("Enter the size of array 2: ");
            int n2 = sc.nextInt();
            int[] arr2 = new int[n2];  // Use n2 instead of n
            System.out.print("Enter elements of array 2: ");
            for (int i = 0; i < n2; i++) {
                arr2[i] = sc.nextInt();
            }

            // Determine the size of the output array
            int maxLength = Math.max(n, n2) + 1;  // Maximum possible length of the output array
            int[] output = new int[maxLength];

            // Call the method to calculate the sum of arrays
            sumOfTwoArrays(arr1, n, arr2, n2, output);

            // Print the result
            System.out.print("Sum of arrays: ");
            for (int num : output) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }


