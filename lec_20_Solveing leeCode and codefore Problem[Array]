****************************************************
//  simple Java code to reverse an array:
*****************************************************

import java.util.Arrays;
public class lec_20_solving_leecodeProblem {

    public static void reverseArray(int[]arr) {
       int start =0;
       int end = arr.length -1;

           while (start < end) {
               int temp = arr[start];
                arr[start] = arr[end];
               arr[end] = temp;
               start ++;
               end --;
            }

//        System.out.print(Arrays.toString(arr) + " ");

        for (int i =0; i < arr.length; i++){
            System.out.print(arr[i] + " ");
        }
    }

    public static void main(String[] args) {
        reverseArray(new int[] {1,2,3,4});
    }
}


 >>> QUESTION NO:- 2
*************************************************************
Given an array/list 'ARR' of integers and a position ‘M’. You have to reverse the array after that position.

Example:

We have an array ARR = {1, 2, 3, 4, 5, 6} and M = 3 , considering 0 
based indexing so the subarray {5, 6} will be reversed and our 
output array will be {1, 2, 3, 4, 6, 5}.
****************************************************************

import java.util.*;

public class Main {
    public static void reverseArrayAfterPosition(int[] arr, int position) {
        int start = position + 1;
        int end = arr.length - 1;

        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;

            start++;
            end--;
        }

        System.out.println("Reversed Array after position " + position + ": " + Arrays.toString(arr));
    }

    public static void main(String[] args) {
        int[] originalArray = {1, 2, 3, 4, 5, 6};
        int position = 3; // Assuming 0-based indexing

        reverseArrayAfterPosition(originalArray, position);
    }
}


QUESTION NO:- 3
**************************************
merge two sorted arrays into a single sorted array:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
**************************************************

import java.util.Arrays;

public class MergeSortedArrays {
    public static int[] mergeArrays(int[] arr1, int[] arr2) {
        int n1 = arr1.length;
        int n2 = arr2.length;
        int[] mergedArray = new int[n1 + n2];
        
        int i = 0, j = 0, k = 0;
        
        // Merge elements from both arrays until one of them is exhausted
        while (i < n1 && j < n2) {
            if (arr1[i] <= arr2[j]) {
                mergedArray[k] = arr1[i];
                i++;
            } else {
                mergedArray[k] = arr2[j];
                j++;
            }
            k++;
        }
        
        // Copy the remaining elements of arr1, if any
        while (i < n1) {
            mergedArray[k] = arr1[i];
            i++;
            k++;
        }
        
        // Copy the remaining elements of arr2, if any
        while (j < n2) {
            mergedArray[k] = arr2[j];
            j++;
            k++;
        }
        
        return mergedArray;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 3, 5, 7, 9};
        int[] arr2 = {2, 4, 6, 8, 10};
        
        int[] mergedArray = mergeArrays(arr1, arr2);
        
        System.out.println("Merged Sorted Array: " + Arrays.toString(mergedArray));
    }
}

