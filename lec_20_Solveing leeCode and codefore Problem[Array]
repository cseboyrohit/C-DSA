****************************************************
//  simple Java code to reverse an array:
*****************************************************

import java.util.Arrays;
public class lec_20_solving_leecodeProblem {

    public static void reverseArray(int[]arr) {
       int start =0;
       int end = arr.length -1;

           while (start < end) {
               int temp = arr[start];
                arr[start] = arr[end];
               arr[end] = temp;
               start ++;
               end --;
            }

//        System.out.print(Arrays.toString(arr) + " ");

        for (int i =0; i < arr.length; i++){
            System.out.print(arr[i] + " ");
        }
    }

    public static void main(String[] args) {
        reverseArray(new int[] {1,2,3,4});
    }
}


 >>> QUESTION NO:- 2
*************************************************************
Given an array/list 'ARR' of integers and a position ‘M’. You have to reverse the array after that position.

Example:

We have an array ARR = {1, 2, 3, 4, 5, 6} and M = 3 , considering 0 
based indexing so the subarray {5, 6} will be reversed and our 
output array will be {1, 2, 3, 4, 6, 5}.
****************************************************************

import java.util.*;

public class Main {
    public static void reverseArrayAfterPosition(int[] arr, int position) {
        int start = position + 1;
        int end = arr.length - 1;

        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;

            start++;
            end--;
        }

        System.out.println("Reversed Array after position " + position + ": " + Arrays.toString(arr));
    }

    public static void main(String[] args) {
        int[] originalArray = {1, 2, 3, 4, 5, 6};
        int position = 3; // Assuming 0-based indexing

        reverseArrayAfterPosition(originalArray, position);
    }
}


QUESTION NO:- 3
**************************************
merge two sorted arrays into a single sorted array:
**************************************************

import java.util.Arrays;

 class MergeAscendingOrder {
    public static int[] mergeAscending(int[] arr1, int[] arr2) {
        int n = arr1.length;
        int m = arr2.length;
        int[] mergeArray = new int[n + m];

        int i = 0, j = 0, k = 0;
        while (i < n && j < m) {
            if (arr1[i] <= arr2[j]) { // Changed comparison to Make acending order
                mergeArray[k] = arr1[i];
                i++;
                k++;
            } else {
                mergeArray[k] = arr2[j];
                j++;
                k++;
            }
        }

      // copy element
        while (i < n) {
            mergeArray[k++] = arr1[i++];
        }
        while (j < m) {
            mergeArray[k++] = arr2[j++];
        }

        return mergeArray;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 3, 5, 7, 9};
        int[] arr2 = {2, 4, 6, 8, 10};

        int[] mergedAscending = mergeAscending(arr1, arr2);
        System.out.println("Merged Array in Ascending Order: " + Arrays.toString(mergedAscending));
    }
}



QUESTION NO:-4
**************************************************************
Merge nums1 and nums2 into a single array sorted in non-decreasing order.

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

****************************************************************

import java.util.Arrays;

class MergeSortedArrays {
    public static void merge(int[] nums1, int m, int[] nums2, int n) {
        // Initialize pointers for nums1 and nums2
        int i = m - 1; // Pointer for nums1
        int j = n - 1; // Pointer for nums2
        int k = m + n - 1; // Pointer for merged array

        // Merge nums1 and nums2 from the end
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k] = nums1[i];
                i--;
            } else {
                nums1[k] = nums2[j];
                j--;
            }
            k--;
        }

        // If there are remaining elements in nums2, copy them to nums1
        while (j >= 0) {
            nums1[k] = nums2[j];
            j--;
            k--;
        }
        System.out.println(Arrays.toString(nums1));

    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 0, 0, 0};
        int m = 3;
        int[] nums2 = {2, 5, 6};
        int n = 3;
        merge(nums1, m, nums2, n);
        
        
          // You can try this method
        
//        MergeSortedArrays merger = new MergeSortedArrays();
//        merger.merge(nums1, m, nums2, n);
//
//        // Print the merged array
//        for (int num : nums1) {
//            System.out.print(num + " ");
//        }
    }
}


QUESTION NO:-5
****************************************************************
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]

*********************************************************************

public class lec_20_solving_leecodeProblem {
    public void moveZeroes(int[] nums) {
        if(nums == null || nums.length == 0){
            return ;
        }

        int insertPos =0;
           for(int i = 0; i < nums.length; i++) {
               if (nums[i] != 0){
                   nums[insertPos] = nums[i];
                   insertPos++;

               }
           }

        // Fill the remaining positions with zeroes
           while ( insertPos < nums.length){
                nums[insertPos++] = 0;
           }

    }

    public static void main(String[] args) {
        int[] nums = {0, 1, 0, 3, 12};

        lec_20_solving_leecodeProblem moveto = new lec_20_solving_leecodeProblem(); // class name 
        moveto.moveZeroes(nums);

        for(int num : nums){
            System.out.print(num+ "  ");
        }

    }
}


>>>>>>>>>>>>> 2ND METHOD Using swaping method <<<<<<<<<<<<<<<<<<

public class MoveZeroesToEnd {
    public void moveZeroes(int[] nums) {
        if (nums == null || nums.length == 0) {
            return;
        }
        
        int left = 0;
        int right = 0;
        
        // Iterate through the array
        while (right < nums.length) {
            // If the current element is non-zero, swap it with the left pointer
            if (nums[right] != 0) {
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                
                left++; // Move the left pointer forward
            }
            
            right++; // Move the right pointer forward
        }
    }

    public static void main(String[] args) {
        int[] nums = {0, 1, 0, 3, 12};
        
        MoveZeroesToEnd solution = new MoveZeroesToEnd();
        solution.moveZeroes(nums);

        // Print the modified array
        for (int num : nums) {
            System.out.print(num + " ");
        }
    }
}



