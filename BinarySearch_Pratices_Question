package learnDSA.com;
/*
public class BinarySearch_Pratices {

     static int descendingSearch(int[]arr, int k){
         int start =0;
         int end = arr.length -1;

           while (start <= end){
               int mid = start + (end - start)/2;
                if(k == arr[mid])
                    return mid;

                else if( k < arr[mid]){
                    start = mid + 1;
                }

                else
                    start = mid + 1;

           }
           return -1;

     }


    public static void main(String[] args) {
         int[] arr= {20,17,15,14,13,12,10,8,4};
         int a = 4;
        System.out.println(descendingSearch(arr, a));

    }
}

 */
Question no:- 1--------------------------------------------------------------

/*cheak the arrray acending order ya decending order

  public class BinarySearch_Pratices {


    static void searchOrder(int[] arr) {
        int start = 0;
        int end = arr.length - 1;

        if (arr[start] < arr[end]) {
            System.out.println("Ascending order");
        } else if (arr[start] > arr[end]) {
            System.out.println("Descending order");
        } else {
            System.out.println("Not in order");
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 5, 3, 6};
        searchOrder(arr);
    }
}
 */

Question no:- 2------------------------------------------------------------
/*
// find the first and last element
public class BinarySearch_Pratices {

    static int firstoccurence(int[]arr, int k){
        int start =0;
        int end =arr.length -1;
        int result =-1;

           while(start <= end ){
               int mid = start + (end - start)/2;
               if(k == arr[mid]){
                   result =mid;
                   end = mid -1;
               }
               else if (k < arr[mid])
                   end = mid -1;

               else
                   start = mid +1;
           }
           return result;
    }
    static int lastoccurence(int[]arr, int k){
        int start =0;
        int end =arr.length -1;
        int result =-1;

        while(start <= end ){
            int mid = start + (end - start)/2;
            if(k == arr[mid]){
                result =mid;
               start = mid + 1;
            }
            else if (k < arr[mid])
                end = mid -1;

            else
                start = mid +1;
        }
        return result;
    }

    public static void main(String[] args) {
        int[]arr = {2,4,10,10,10,18,20};
        System.out.println(firstoccurence(arr,10));
        System.out.println(lastoccurence(arr, 10));
    }
}

 */

Question no:- 3.........................................................
// Count the element in sort array

public class BinarySearch_Pratices {

    static int firstoccurence(int[]arr, int k){
        int start =0;
        int end =arr.length -1;
        int result =-1;

        while(start <= end ){
            int mid = start + (end - start)/2;
            if(k == arr[mid]){
                result =mid;
                end = mid -1;
            }
            else if (k < arr[mid])
                end = mid -1;

            else
                start = mid +1;
        }
        return result;
    }
    static int lastoccurence(int[]arr, int k){
        int start =0;
        int end =arr.length -1;
        int result =-1;

        while(start <= end ){
            int mid = start + (end - start)/2;
            if(k == arr[mid]){
                result =mid;
                start = mid + 1;
            }
            else if (k < arr[mid])
                end = mid -1;

            else
                start = mid +1;
        }
        return result;
    }

    public static void main(String[] args) {
        int[]arr = {2,4,10,10,10 ,18,20};
         int length =  lastoccurence(arr,10) -  firstoccurence(arr,10) +1;
        System.out.println(firstoccurence(arr,10));
        System.out.println(lastoccurence(arr, 10));
        System.out.println(length);

    }
}

 */
Question no:- 4-------------------------------------------------------------------------------------
// finding an element in a rotated sorted array using a modified binary search:  

public class RotatedSortedArraySearch {
    public static int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            }

            // Left half is sorted
            if (nums[left] <= nums[mid]) {
                // Target is within the left half
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            // Right half is sorted
            else {
                // Target is within the right half
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1; // Element not found
    }

    public static void main(String[] args) {
        int[] nums = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;
        int index = search(nums, target);
        System.out.println("Index of target element: " + index); // Output: 4 (index of the target element)
    }
}

Question no:- 5 ----------------------------------------------------------------------------

//Explain the functionality of the nearlySearch method in the given Java code

public class BinarySearch_Pratices {
    static int nearlySearch(int[] arr, int element) {
        int start = 0;
        int end = arr.length - 1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            // If element is found at mid
            if (arr[mid] == element)
                return mid;

            // If element is found nearly at mid-1
            if (mid - 1 >= start && arr[mid - 1] == element)
                return mid - 1;

            // If element is found nearly at mid+1
            if (mid + 1 <= end && arr[mid + 1] == element)
                return mid + 1;

            // If element is not found, update start and end pointers
            if (arr[mid] < element)
                start = mid + 2;
            else
                end = mid - 2;
        }

        return -1; // Element not found
    }

    public static void main(String[] args) {
        int[] arr = {5, 10, 20, 30, 40};
        System.out.println(nearlySearch(arr, 20)); // Output: 2 (index of the nearly matching element)
    }
}


Question:- 6-----------------------------------------------

// Floor of the element in the sort Array
public class BinarySearch_Pratices {
    static int floor(int[] arr, int key){
        int start =0;
        int end = arr.length -1;
        int result = 0;

          while(start <= end ){
              int mid = start + (end -start);
                if(arr[mid] == key)
                    return arr[mid];

                if(arr[mid] < key){
                    result = arr[mid];
                    start = mid +1;
              }

                else if(arr[mid] > key)
                    end = mid -1;

          }
          return result;
    }

    public static void main(String[] args) {
        int[] arr = {1,2,4,8,10,10,12,19};
        System.out.println(floor(arr,5));
    }

}


Question:- 7-----------------------------------------------

// Find the Ceil of an element in a sorted array
public class BinarySearch_Pratices {
    static int floor(int[] arr, int key) {
        int start = 0;
        int end = arr.length - 1;
        int result = -1;

        while (start <= end) {
            int mid = start + (end - start);

            if(arr[mid] == key)
                return arr[mid];

            if(key < arr[mid]){
                result = arr[mid];
                end = mid - 1;
            }
            else {              //if(key > arr[mid]) {
                start = mid + 1;
            }


        }
        return result;

    }
    public static void main(String[] args) {
        int[] arr = {1,2,4,8,10,10,12,19};
        System.out.println(floor(arr,5));
    }

}


Question:- 8-----------------------------------------------
// Find the next charater Element

public class BinarySearch_Pratices {
     static char searchNext_char(char[] arr, char key){
         int start =0;
         int end = arr.length -1;
         char result = '#';

            while(start <= end ){
                int mid = start + (end - start);

                if(arr[mid] == key)
                    start = mid + 1;

                if(key < arr[mid]){
                    result = arr[mid];
                    end = mid -1;
                }
                else{
                    start = mid +1;
                }
            }
            return result;
     }

    public static void main(String[] args) {
        char[]arr= {'a','c','f','h'};
        System.out.println(searchNext_char(arr, 'f'));
    }
}



 // QUESTION N0:- 13 ---------------------------------------------------

// Find the position of an element in infinited sorted array
public class BinarySearch_Pratices {

    static int findPosition(int[] arr, int key) {
        int low = 0;
        int high = 1;

        while (key > arr[high]) {
            low = high;
            high = high * 2; // Doubling high for infinite array
        }

        return binarySearch(arr, low, high, key);
    }

    static int binarySearch(int[] arr, int low, int high, int key) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key)
                return mid;

            if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }


    public static void main(String[] args) {
        // Example array (ideally infinite, but finite for demonstration)
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};

        int index = findPosition(arr,11);
        System.out.println(index);

    }
}



