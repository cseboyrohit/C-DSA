
// Question:- 14-------------------------------------

// index of first in a infinit binary search
public class BinarySearch_Pratices {

    static int findPosition(int[] arr, int key) {
        int low =0;
        int high = 1;

            while(key > arr[high]){
                low = high;
                high = high * 2;
            }
            return binarySeach(arr, low, high, key);
    }
    static int binarySeach(int[]arr,int low, int high, int key){
        int result =-1;

        while (low <= high){
            int mid = low +(high -low)/2;

            if(arr[mid] == key){
                result = mid;
                high = mid -1;
            }
            else if(key > arr[mid])
                low = mid +1;

            else
                high = mid - 1;

        }
       return result;
    }

    public static void main(String[] args) {
        int[] arr = {0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1};
        System.out.println(findPosition(arr , 1));
    }
 }

--------------------------------------------------------------------------

// Minimun different element in a sorted array

 public class BinarySearch_Pratices {
     public static int mini_differentElement(int[]arr, int key){
         int start =0;
         int end =arr.length-1;
         int result =0;

          while (start <= end){
              int mid = start + (end - start)/2;

              if(key == arr[mid]) {
                  return arr[mid];
              }
              else if(key < arr[mid]){
                  end = mid -1;
              }else{
                  start = mid +1;
              }

              // Update the result if the current element is closer to the key
              if (Math.abs(key - arr[start]) < Math.abs(key - arr[end])) { //Return the absolute (positive) value
                  result = arr[start];
              } else {
                  result = arr[end];
              }

          }

          return result;
     }

    public static void main(String[] args) {
        int[] arr = {4,6,10,44,56,90};
        System.out.println(mini_differentElement(arr, 70));
    }
 }




 // >>>>>>>>>>>>>>> Question:- 17 and Question:- 18 same code but different question
 // ek hi problem hoti hai ushe alag alag tarike se puchte hai or dekhte bacha pahachan raha hai ki nhi

// Question:- 17 ---------------------------------------------------------
-
//  find a peak element in an unsorted array using binary search.

public class BinarySearch_Pratices {
    public static int peakElement(int[]arr){
        int low = 0;
        int high = arr.length -1;

           while (low <= high) {
               int mid = low + (high - low)/2;

               if (mid > 0 && mid < arr.length -1){
                   if (arr[mid] > arr[mid -1] && arr[mid] > arr[mid + 1]){
                       return mid;
                   }

                   else if (arr[mid] < arr[mid -1]){
                       high = mid -1;
                   }else{
                       low = mid +1;
                   }
               }

               // First or last element is peak element
               else if(mid == 0){
                   if(arr[0] > arr[1]) {
                       return 0;
                   }else{
                       return 1;
                   }
               }

               else if (mid == arr.length-1){
                   if(arr[arr.length-1] > arr[arr.length-2]){
                       return arr.length - 1;
                   }
                   else{
                       return arr.length - 2;
                   }
               }

           }
           return -1;
    }

    public static void main(String[] args) {
       int[] arr= {5, 10, 20, 15};
        int array[] = {10, 20, 15, 2, 23, 90, 67}; // ans:-20 or 90 both are correct because compare near both first
        int[] arr2 = {10,20,30,40,50};
        System.out.println(peakElement(arr));
        System.out.println(peakElement(array));
        System.out.println(peakElement(arr2));

    }
}


 // Question:- 18 and Q:- 17 ----------------------------------------------------

/*Given a bitonic sequence of n distinct elements, and an integer x,
 the task is to write a program to find given element x in the bitonic sequence in O(log n) time.

     Input :  arr[] = {-3, 9, 18, 20, 17, 5, 1}, key = 20
     Output : Found at index 3
 */
public class BinarySearch_Pratices {
    public static int bitonicArray(int[]arr){
        int low = 0;
        int high = arr.length -1;

        while (low <= high) {
            int mid = low + (high - low)/2;

            if (mid > 0 && mid < arr.length -1){
                if (arr[mid] > arr[mid -1] && arr[mid] > arr[mid + 1]){
                    return mid;
                }

                else if (arr[mid] < arr[mid -1]){
                    high = mid -1;
                }else{
                    low = mid +1;
                }
            }

            // First or last element is peak element
            else if(mid == 0){
                if(arr[0] > arr[1]) {
                    return 0;
                }else{
                    return 1;
                }
            }

            else if (mid == arr.length-1){
                if(arr[arr.length-1] > arr[arr.length-2]){
                    return arr.length - 1;
                }
                else{
                    return arr.length - 2;
                }
            }

        }
        return -1;
    }

    public static void main(String[] args) {
        int arr[] = {-3, 9, 18, 20, 17, 5, 1};
        System.out.println(bitonicArray(arr));
    }
}
